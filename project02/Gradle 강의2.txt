[Gradle 웹 프로젝트 만들기]
1. servlet-api 의존 라이브러리를 추가한다.
=> 단 컴파일할 때만 참조하고 서버 배치에는 포함하지 않게 한다.
providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

[Gradle 스프링 MVC 프로젝트 만들기]
2. web.xml 파일에 "프론트 컨트롤러 서블릿"을 등록하기 모든요청을 보내는 프론트컨트롤러 처리해서 jsp
=> spring 문서에서 DispatcherServlet 설정 부분 참조.
  <servlet>
    <servlet-name>dispatch</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- 스프링 설정 파일의 경로를 지정하지 않으면, 다음 경로의 파일을 찾는다. 규칙 => /WEB-INF/[서블릿이름]-servlet.xml 
      예 => /WEB-INF/dispatch-servlet.xml -->
    <!-- 스프링 설정 파일의 위치를 명시하기 -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/conf/dispatch-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatch</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>
  
2. 스프링 설정 파일 만들기
=> 스프링 문서에서 스프링 설정 파일의 예제를 복사해온다.
=> /WEB-INF/conf/dispatch-servlet.xml 파일에 붙여넣는다.

3. HelloController 페이지 컨트롤러 만들기

[게시판 만들기]
1. MySQL DBMS 설치
2. 스키마(데이터베이스) 생성
  => java83db
3. 사용자 생성 및 스키마 할당
  => java83/java83db
4. 게시판 테이블 생성
  =>example.sql 참조
5. Mybatis 사용 준비
1) mybatis 의존 라이브러리 추가 
   => build.gradle에 의존 라이브러리 이름 추가
      mybatis => mybatis 기본 라이브러리
      mybatis-spring => 스프링 연동 라이브러리
      mysql-connector => MySQL JDBC 라이브러리
   => "gradle eclipse" 실행
2) 스프링 설정 파일에 mybatis 설정 정보 추가
   => /WEB-INF/conf/dispatch-servlet.xml 에 추가
   => DataSource 설정 : DB 커넥션 풀 객체 
   => TransactionManager 설정 : 트랜잭션 관리자
   => SqlSessionFactoryBean 설정 : SqlSessionFactory 생성자 
   => MapperScannerConfigurer 설정 : Mybatis DAO를 자동 생성시키는 생성기   

6. 테이블 당 한 개의 Value Object 생성
   => Board 클래스 생성

7. DAO 클래스 생성
   => BoardDao 인터페이스 생성

8. Service 클래스 생성
   => BoardService 인터페이스 생성
   => BoardServiceImpl 구현체 생성

9. SQL Mapper 파일 생성
   => BoardDao.xml 파일 생성         

10. 게시판 페이지 컨트롤러 생성
   => BoardController 클래스 생성

11. 게시판 목록 뷰 컴포넌트 생성
   => Gradle 설정 파일에 JSTL 의존 라이브러리 추가
   => "gradle eclipse" 실행
   => /board/list.jsp 생성
   
12. 기존에 설치된 뷰 리졸버를 다른 뷰 리졸버로 교체한다.
   => dispatch-servlet.xml 편집
   
13. 게시물 상세 보기 구현
   => list.jsp에서 제목에 링크를 건다.
   => BoardController에 detail() 추가
   => BoardDao.xml에 selectOne SQL 추가
   => board/detail.jsp 추가

14. 게시물 등록 구현
   => list.jsp에서 등록 링크를 건다.
   => form.jsp 추가
   => BoardController에 add() 메서드 추가
   => BoardDao.xml에 insert SQL 추가      

15. 게시물 변경 구현
   => BoardController에 update() 메서드 추가
   => BoardDao.xml에 update SQL 추가
   => detail.jsp 변경 
   
16. 게시물 삭제 구현
   => detail.jsp 변경
   => BoardController에 delete() 메서드 추가
   => BoardDao.xml에 delete SQL 추가 

17. 스프링 설정 파일 분리
   => 프론트 컨트롤러나 페이지 컨트롤러에서 공통으로 사용할 객체는 
      root-context로 분리해 관리하다.
   => web.xml에 root context를 관리할 ContextLoaderListener를 추가한다.
   => root-context.xml 파일 생성
   => dispatch-servlet.xml에서 웹과 관련이 없는 객체는 
      root-context.xml로 옮긴다.









